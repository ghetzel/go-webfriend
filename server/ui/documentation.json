[
  {
    "display_name": "assert",
    "name": "assert",
    "commands": [
      {
        "name": "compare",
        "description": "Return an error if the given value is not equal to the other value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "contains",
        "description": "Return an error if the given value does not contain another value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "empty",
        "description": "Return an error if the given value not empty.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "equal",
        "description": "Return an error if the given value is not equal to the other value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "exists",
        "description": "Return an error if the given value is null or zero-length.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "false",
        "description": "Return an error if the given value is not false.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "gt",
        "description": "Return an error if the given value is not numerically greater than the second value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "gte",
        "description": "Return an error if the given value is not numerically greater than or equal to the second value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_array",
        "description": "Return an error if the given value is not an array.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_boolean",
        "description": "Return an error if the given value is not a boolean value.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_duration",
        "description": "Return an error if the given value is not parsable as a duration.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_numeric",
        "description": "Return an error if the given value is not a numeric value.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_object",
        "description": "Return an error if the given value is not an object.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_scalar",
        "description": "Return an error if the given value is not a scalar value.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_string",
        "description": "Return an error if the given value is not a string.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "is_time",
        "description": "Return an error if the given value is not parsable as a time.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "lt",
        "description": "Return an error if the given value is not numerically less than the second value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "lte",
        "description": "Return an error if the given value is not numerically less than or equal to the second value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "not_contains",
        "description": "Return an error if the given value contains another value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "not_equal",
        "description": "Return an error if the given value is equal to the other value.",
        "argument": {
          "name": "have",
          "types": "any"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "test",
            "types": "string"
          }
        ]
      },
      {
        "name": "not_null",
        "description": "Return an error if the given value is null.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "null",
        "description": "Return an error if the given value is not null.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      },
      {
        "name": "true",
        "description": "Return an error if the given value is not true.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          },
          {
            "name": "snippet",
            "types": "string"
          }
        ]
      }
    ]
  },
  {
    "display_name": "cookies",
    "name": "cookies",
    "summary": "Commands for interacting with the browser's cookie storage backend.",
    "commands": [
      {
        "name": "clear",
        "description": "Clears all browser cookies."
      },
      {
        "name": "delete",
        "description": "Deletes a cookie by name, and optionally matching additional criteria.",
        "argument": {
          "name": "name",
          "types": "string"
        },
        "options": [
          {
            "name": "url",
            "types": "string",
            "description": "Deletes all cookies with the given name where domain and path match the given URL."
          },
          {
            "name": "domain",
            "types": "string",
            "description": "If specified, deletes only cookies with this exact domain."
          },
          {
            "name": "path",
            "types": "string",
            "description": "If specified, deletes only cookies with this exact path."
          }
        ]
      },
      {
        "name": "get",
        "description": "Get a cookie by its name.",
        "argument": {
          "name": "name",
          "types": "string"
        },
        "return": {
          "types": "Cookie",
          "parameters": [
            {
              "name": "name",
              "types": "string",
              "description": "The name of the cookie."
            },
            {
              "name": "value",
              "types": "string",
              "description": "The cookie's value."
            },
            {
              "name": "domain",
              "types": "string",
              "description": "The applicable domain for the cookie."
            },
            {
              "name": "path",
              "types": "string",
              "description": "The cookie's path."
            },
            {
              "name": "size",
              "types": "int",
              "description": "The size of the cookie."
            },
            {
              "name": "expires",
              "types": "Time",
              "description": "The cookie's expiration date."
            },
            {
              "name": "http_only",
              "types": "bool",
              "description": "The cookie is flagged as being inaccessible to client-side scripts."
            },
            {
              "name": "secure",
              "types": "bool",
              "description": "The cookie is flagged as \"secure\""
            },
            {
              "name": "session",
              "types": "bool",
              "description": "This is a session cookie."
            },
            {
              "name": "same_site",
              "types": "string",
              "description": "The same site value of the cookie (\"Strict\" or \"Lax\")"
            },
            {
              "name": "url",
              "types": "string",
              "description": "The URL the cookie should refer to (when setting)"
            }
          ]
        }
      },
      {
        "name": "list",
        "description": "List all cookies, either for the given set of URLs or for the current tab (if omitted).",
        "options": [
          {
            "name": "urls",
            "types": "[]string",
            "description": "an array of strings representing the URLs to retrieve cookies for.  If omitted, the\nURL of the current browser tab will be used"
          },
          {
            "name": "names",
            "types": "[]string",
            "description": "A list of cookie names to include in the output.  If non-empty, only these cookies will appear (if present)."
          }
        ],
        "return": {
          "types": "[]Cookie"
        }
      },
      {
        "name": "map",
        "description": "A variant of cookies::list that returns matching cookies as a map of name=value pairs.",
        "options": [
          {
            "name": "urls",
            "types": "[]string",
            "description": "an array of strings representing the URLs to retrieve cookies for.  If omitted, the\nURL of the current browser tab will be used"
          },
          {
            "name": "names",
            "types": "[]string",
            "description": "A list of cookie names to include in the output.  If non-empty, only these cookies will appear (if present)."
          }
        ],
        "return": {
          "types": "map"
        }
      },
      {
        "name": "set",
        "description": "Set a cookie.",
        "options": [
          {
            "name": "name",
            "types": "string",
            "description": "The name of the cookie."
          },
          {
            "name": "value",
            "types": "string",
            "description": "The cookie's value."
          },
          {
            "name": "domain",
            "types": "string",
            "description": "The applicable domain for the cookie."
          },
          {
            "name": "path",
            "types": "string",
            "description": "The cookie's path."
          },
          {
            "name": "size",
            "types": "int",
            "description": "The size of the cookie."
          },
          {
            "name": "expires",
            "types": "Time",
            "description": "The cookie's expiration date."
          },
          {
            "name": "http_only",
            "types": "bool",
            "description": "The cookie is flagged as being inaccessible to client-side scripts."
          },
          {
            "name": "secure",
            "types": "bool",
            "description": "The cookie is flagged as \"secure\""
          },
          {
            "name": "session",
            "types": "bool",
            "description": "This is a session cookie."
          },
          {
            "name": "same_site",
            "types": "string",
            "description": "The same site value of the cookie (\"Strict\" or \"Lax\")"
          },
          {
            "name": "url",
            "types": "string",
            "description": "The URL the cookie should refer to (when setting)"
          }
        ]
      }
    ]
  },
  {
    "display_name": "core",
    "name": "core",
    "summary": "Commonly used commands for basic browser interaction.",
    "commands": [
      {
        "name": "back",
        "description": "Navigate back through the current tab's history."
      },
      {
        "name": "click",
        "description": "Click on HTML element(s) matches by selector.  If multiple is true, then all\nelements matched by selector will be clicked in the order they are returned.\nOtherwise, an error is returned unless selector matches exactly one element.\n\n#### Examples\n\n##### Click on the element with id \"login\"\n```\nclick \"#login\"\n```\n\n##### Click on all `\u003ca\u003e` elements on the page, waiting 150ms between each click.\n```\nclick \"a\" {\n multiple: true,\n delay:    \"150ms\",\n}\n```",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "options": [
          {
            "name": "multiple",
            "types": "bool",
            "description": "Permit multiple elements to be clicked."
          },
          {
            "name": "delay",
            "types": "Duration",
            "description": "If Multiple clicks are permitted, what is the delay between each click.",
            "default": "\"20ms\""
          },
          {
            "name": "match_text",
            "types": "string",
            "description": "If provided, this represents a regular expression that the text value of matching elements must match to be clicked."
          }
        ],
        "return": {
          "types": "[]Element"
        }
      },
      {
        "name": "click_at",
        "description": "Click the page at the given X, Y coordinates.",
        "options": [
          {
            "name": "x",
            "types": "int",
            "description": "The X-coordinate to click at"
          },
          {
            "name": "y",
            "types": "int",
            "description": "The Y-coordinate to click at"
          }
        ],
        "return": {
          "types": "[]Element"
        }
      },
      {
        "name": "configure",
        "description": "Configures various features of the Remote Debugging protocol and provides\nenvironment setup.",
        "options": [
          {
            "name": "user_agent",
            "types": "string",
            "description": "Override the default User-Agent header sent with all requests"
          },
          {
            "name": "latitude",
            "types": "float",
            "description": "Specify the Geographic latitude to emulate [-90.0, 90.0]"
          },
          {
            "name": "longitude",
            "types": "float",
            "description": "Specify the Geographic longitude to emulate [-180.0, 180.0]"
          },
          {
            "name": "accuracy",
            "types": "float",
            "description": "Specify a Geolocation error margin (accurate to within n meters)",
            "default": 1
          },
          {
            "name": "disable_scripts",
            "types": "bool",
            "description": "Disable JavaScript execution in the browser."
          },
          {
            "name": "emulate_touch",
            "types": "bool",
            "description": "Emulate a touch-capable device."
          },
          {
            "name": "background_color",
            "types": "string",
            "description": "Set the default background color of the underlying window in the following formats: `#RRGGBB`, `#RRGGBBAA`, `rgb()`, `rgba()`, `hsv()`, `hsva()`, `hsl()`, `hsla()`."
          },
          {
            "name": "hide_scrollbars",
            "types": "bool",
            "description": "Set whether scrollbars should be hidden all the time."
          }
        ]
      },
      {
        "name": "env",
        "description": "Retrieves a system environment variable and returns the value of it, or a\nfallback value if the variable does not exist or (optionally) is empty.\n\n#### Examples\n\n##### Get the value of the `USER` environment variable and store it\n```\nenv 'USER' -\u003e $user\n```\n\n##### Require the `LANG`, `USER`, and `CI` environment variables; and fail they are not set.\n```\nenv 'LANG' { required: true }\nenv 'USER' { required: true }\nenv 'CI'   { required: true }\n```",
        "argument": {
          "name": "name",
          "types": "string"
        },
        "options": [
          {
            "name": "fallback",
            "types": "any",
            "description": "The value to return if the environment variable does not exist, or\n(optionally) is empty."
          },
          {
            "name": "required",
            "types": "bool",
            "description": "Whether empty values should be ignored or not.",
            "default": false
          },
          {
            "name": "detect_type",
            "types": "bool",
            "description": "Whether automatic type detection should be performed or not.",
            "default": true
          },
          {
            "name": "joiner",
            "types": "string",
            "description": "If specified, this string will be used to split matching values into a\nlist of values. This is useful for environment variables that contain\nmultiple values joined by a separator (e.g: the PATH variable.)"
          }
        ],
        "return": {
          "types": "any"
        }
      },
      {
        "name": "exit",
        "description": "Immediately close the browser without error or delay."
      },
      {
        "name": "export",
        "description": "Specify a variable that should be exported to external Javascripts.",
        "argument": {
          "name": "name",
          "types": "string"
        }
      },
      {
        "name": "fail",
        "description": "Immediately exit the script in an error-like fashion with a specific message.",
        "argument": {
          "name": "message",
          "types": "string"
        }
      },
      {
        "name": "field",
        "description": "Locate and enter data into a form input field.\n\n#### Examples\n\n##### Type in a username and password, then hit Enter to submit.\n```\nfield '#username' {\n value: 'myuser',\n}\n\nfield '#password' {\n value: 'p@ssw0rd!',\n enter: true,\n}\n```",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "options": [
          {
            "name": "value",
            "types": "any",
            "description": "The value to enter into the field."
          },
          {
            "name": "autoclear",
            "types": "bool",
            "description": "Whether to clear the existing contents of the field before entering new data.",
            "default": true
          },
          {
            "name": "enter",
            "types": "bool",
            "description": "Whether to automatically send an \"Enter\" keystroke after typing in the given value"
          },
          {
            "name": "click",
            "types": "Selector",
            "description": "An element to click after the field value is changed."
          }
        ],
        "return": {
          "types": "[]Element"
        }
      },
      {
        "name": "focus",
        "description": "Focuses the given HTML element described by selector. One and only one element may match the selector.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "return": {
          "types": "Element"
        }
      },
      {
        "name": "go",
        "description": "Navigate to a URL.\n\n#### Examples\n\n##### Go to Google.\n```\ngo \"google.com\"\n```\n\n##### Go to www.example.com, only wait for the first network response, and don't fail if the request times out.\n```\ngo \"https://www.exmaple.com\" {\n timeout:             '10s',\n continue_on_timeout: true,\n load_event_name:     'Network.responseReceived',\n}\n```",
        "argument": {
          "name": "uri",
          "types": "string"
        },
        "options": [
          {
            "name": "referrer",
            "types": "string",
            "description": "If a URL is specified, it will be used as the HTTP Referer [sic] header\nfield when going to the given page. If the URL of the currently-loaded\npage and the referrer are the same, the page will no change.\n\nFor this reason, you may specify the special value 'random', which will\ngenerate a URL with a randomly generated path component to ensure that\nit is always different from the current page. Specifying None will omit\nthe field from the request."
          },
          {
            "name": "wait_for_load",
            "types": "bool",
            "description": "Whether to block until the page has finished loading.",
            "default": true
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the page to load.",
            "default": "\"30s\""
          },
          {
            "name": "request_poll_timeout",
            "types": "Duration",
            "description": "The amount of time to poll for the originating network request.",
            "default": "\"5s\""
          },
          {
            "name": "clear_requests",
            "types": "bool",
            "description": "Whether the resources stack that is queried in page::resources and\npage::resource is cleared before navigating. Set this to false to\npreserve the ability to retrieve data that was loaded on previous pages.",
            "default": false
          },
          {
            "name": "require_originating_request",
            "types": "bool",
            "description": "Whether the originating network request is required in the return value.  If this is\nfalse, the response may be missing status, headers, and timing details.",
            "default": true
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error is encountered during page\nload (e.g.: HTTP 4xx/5xx, SSL, TCP connection errors)."
          },
          {
            "name": "continue_statuses",
            "types": "[]int",
            "description": "These HTTP status codes are not considered errors."
          },
          {
            "name": "continue_on_timeout",
            "types": "bool",
            "description": "Whether to continue execution if load_event_name is not seen before\ntimeout elapses.",
            "default": false
          },
          {
            "name": "load_event_name",
            "types": "string",
            "description": "The RPC event to wait for before proceeding to the next command.",
            "default": "\"Page.loadEventFired\""
          },
          {
            "name": "username",
            "types": "string",
            "description": "Provide a username if one is requested via HTTP Basic authentication."
          },
          {
            "name": "password",
            "types": "string",
            "description": "Provide a password if one is requested via HTTP Basic authentication."
          },
          {
            "name": "realm",
            "types": "string",
            "description": "Only provide credentials if the HTTP Basic Authentication Realm matches this one."
          }
        ],
        "return": {
          "types": "GoResponse",
          "parameters": [
            {
              "name": "url",
              "types": "string",
              "description": "The final URL of the page that was loaded."
            },
            {
              "name": "status",
              "types": "int",
              "description": "The HTTP status code of the loaded page."
            },
            {
              "name": "timing_details",
              "types": "map",
              "description": "A map of durations (in milliseconds) that various phases of the page load took."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Map of HTTP response headers."
            },
            {
              "name": "mime_type",
              "types": "string",
              "description": "The MIME type of the response content."
            },
            {
              "name": "remote_address",
              "types": "string",
              "description": "The remote address of the loaded page."
            },
            {
              "name": "protocol",
              "types": "string",
              "description": "The protocol that was negotiated and used to load the page."
            }
          ]
        }
      },
      {
        "name": "highlight",
        "description": "Highlight the node matching the given selector, or clear all highlights if\nthe selector is \"none\"",
        "argument": {
          "name": "selector",
          "types": "any"
        },
        "options": [
          {
            "name": "r",
            "types": "int",
            "description": "The red component of the highlight color (0 \u003c= r \u003c 256)",
            "default": 0
          },
          {
            "name": "g",
            "types": "int",
            "description": "The green component of the highlight color (0 \u003c= g \u003c 256)",
            "default": 128
          },
          {
            "name": "b",
            "types": "int",
            "description": "The blue component of the highlight color (0 \u003c= b \u003c 256)",
            "default": 128
          },
          {
            "name": "a",
            "types": "float",
            "description": "The alpha component of the highlight color (0.0 \u003c= a \u003c= 1.0)",
            "default": 0.5
          }
        ]
      },
      {
        "name": "inspect",
        "description": "Retrieve the element at the given coordinates, optionally highlighting it.",
        "options": [
          {
            "name": "x",
            "types": "float",
            "description": "The X-coordinate to inspect."
          },
          {
            "name": "y",
            "types": "float",
            "description": "The Y-coordinate to inspect."
          },
          {
            "name": "highlight",
            "types": "bool",
            "description": "Whether to highlight the inspected DOM element or not.",
            "default": true
          },
          {
            "name": "r",
            "types": "int",
            "description": "The red component of the highlight color (0 \u003c= r \u003c 256)",
            "default": 0
          },
          {
            "name": "g",
            "types": "int",
            "description": "The green component of the highlight color (0 \u003c= g \u003c 256)",
            "default": 128
          },
          {
            "name": "b",
            "types": "int",
            "description": "The blue component of the highlight color (0 \u003c= b \u003c 256)",
            "default": 128
          },
          {
            "name": "a",
            "types": "float",
            "description": "The alpha component of the highlight color (0.0 \u003c= a \u003c= 1.0)",
            "default": 0.5
          }
        ],
        "return": {
          "types": "Element"
        }
      },
      {
        "name": "javascript",
        "description": "Inject Javascript into the current page, evaluate it, and return the results.\nThe script is wrapped in an anonymous function whose return value will be\nreturned from this command as a native data type.\n\nScripts will have access to all exported variables in the calling script (exported with the\n\"export\" command). They are available to injected script as a plain object accessible using\nthe \"webfriend\" variable.\n\n#### Examples\n\n##### Use the `webfriend` local variable to access Friendscript data from JavaScript, make a change, then pass it back.\n```\n$pi = 3.0\n\njavascript \"return webfriend.pi + 0.14\" -\u003e $pi\n# $pi is now 3.14\n```\n\n##### Inject a script that will retrieve all `\u003ca\u003e` tags on a page and return their \"href\" attributes (if present).\n```\njavascript begin\n   var as = document.querySelectorAll('a');\n   var hrefs = [];\n\n   for(var i = 0; i \u003c as.length; i++) {\n       var a = as[i];\n       var href = a.getAttribute('href');\n\n       if (href \u0026\u0026 href.length) {\n           hrefs.push(href);\n       }\n   }\n\n   return hrefs;\nend -\u003e $result\n\n# $result now contains an array of zero or more strings as returned from JavaScript.\n```",
        "argument": {
          "name": "script",
          "types": "string"
        },
        "return": {
          "types": "any"
        }
      },
      {
        "name": "log",
        "description": "Outputs a line to the log.",
        "argument": {
          "name": "message",
          "types": "any"
        }
      },
      {
        "name": "netrc",
        "description": "Retrieve a username and password from a .netrc-formatted file.",
        "argument": {
          "name": "machine",
          "types": "string"
        },
        "options": [
          {
            "name": "filename",
            "types": "string",
            "description": "The path to the .netrc file to load values from.",
            "default": "\"~/.netrc\""
          },
          {
            "name": "extra_fields",
            "types": "[]string",
            "description": "A list of additional, non-standard fields to retrieve from the .netrc entry"
          }
        ],
        "return": {
          "types": "NetrcResponse",
          "parameters": [
            {
              "name": "ok",
              "types": "bool",
              "description": "Whether there was a match or not."
            },
            {
              "name": "machine",
              "types": "string",
              "description": "The machine name that matched."
            },
            {
              "name": "login",
              "types": "string",
              "description": "The login name."
            },
            {
              "name": "password",
              "types": "string",
              "description": "The password."
            },
            {
              "name": "fields",
              "types": "map",
              "description": "Any additional values retrieved from the entry"
            }
          ]
        }
      },
      {
        "name": "put",
        "description": "Store a value in the current scope. Strings will be automatically converted\ninto the appropriate data types (float, int, bool) if possible.",
        "argument": {
          "name": "value",
          "types": "any"
        },
        "return": {
          "types": "any"
        }
      },
      {
        "name": "reload",
        "description": "Reload the currently active tab."
      },
      {
        "name": "resize",
        "description": "Resizes the active viewport of the current page using the Chrome Device\nEmulation API. This does not resize the window itself, but rather the area\nthe current page interprets the window to be.\n\nThis is useful for setting the size of the area that will be rendered for\nscreenshots and screencasts, or for testing responsive design elements.",
        "options": [
          {
            "name": "width",
            "types": "int",
            "description": "The width of the screen."
          },
          {
            "name": "height",
            "types": "int",
            "description": "The height of the screen."
          },
          {
            "name": "scale",
            "types": "float",
            "description": "The scaling factor of the content."
          },
          {
            "name": "mobile",
            "types": "any",
            "description": "Whether to emulate a mobile device or not. If a map is provided, mobile\nemulation will be enabled and configured using the following keys:\n\n\u003cbr\u003e\n\nValue    | Data Type     | Description\n---------|---------------|-------------\n*width*  | int, optional | The width of the mobile screen to emulate.\n*height* | int, optional | The height of the mobile screen to emulate.\n*x*      | int, optional | The horizontal position of the currently viewable portion of the mobile screen.\n*y*      | int, optional | The vertical position of the currently viewable portion of the mobile screen."
          },
          {
            "name": "fit_window",
            "types": "bool",
            "description": "Whether to fit the viewport contents to the available area or not."
          },
          {
            "name": "orientation",
            "types": "string",
            "description": "Which screen orientation to emulate, if any.",
            "default": "\"landscapePrimary\""
          },
          {
            "name": "angle",
            "types": "int",
            "description": "The angle of the screen to emulate (in degrees; 0-360)."
          }
        ],
        "return": {
          "types": "ResizeResponse",
          "parameters": [
            {
              "name": "width",
              "types": "int",
              "description": "The final width of the page after resize."
            },
            {
              "name": "height",
              "types": "int",
              "description": "The final height of the page after resize."
            }
          ]
        }
      },
      {
        "name": "run",
        "description": "Evaluates another Friendscript loaded from another file. The filename is the\nabsolute path or basename of the file to search for in the FRIENDSCRIPT_PATH\nenvironment variable to load and evaluate. The FRIENDSCRIPT_PATH variable\nbehaves like the the traditional *nix PATH variable, wherein multiple paths\ncan be specified as a colon-separated (:) list. The directory of the calling\nscript (if available) will always be checked first.\n\nReturns: The value of the variable named by result_key at the end of the\nevaluated script's execution.",
        "argument": {
          "name": "filename",
          "types": "string"
        },
        "options": [
          {
            "name": "result_key",
            "types": "string",
            "description": "Specifies a key in the scope of the evaluate script that will be used as the result value of this command."
          },
          {
            "name": "data",
            "types": "map",
            "description": "Provides a set of initial variables to the script."
          },
          {
            "name": "isolated",
            "types": "bool",
            "description": "If true, the scope of the running script will not be able to modify data in the parent scope.",
            "default": true
          }
        ],
        "return": {
          "types": "any"
        }
      },
      {
        "name": "scroll_to",
        "description": "Scroll the viewport to the location of the first element matched by selector.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        }
      },
      {
        "name": "scroll_to_coords",
        "description": "Scroll the viewport to the given X,Y coordinates relative to the top-left of\nthe current page.",
        "argument": {
          "name": "x",
          "types": "int"
        },
        "options": [
          {
            "name": "y",
            "types": "int"
          }
        ]
      },
      {
        "name": "select",
        "description": "Polls the DOM for an element that matches the given selector. Either the\nelement will be found and returned within the given timeout, or a\nTimeoutError will be returned.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "options": [
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The timeout before we stop waiting for the element to appear.",
            "default": "\"5s\""
          },
          {
            "name": "min_matches",
            "types": "int",
            "description": "The minimum number of matches necessary to be considered a successful match.",
            "default": 1
          },
          {
            "name": "interval",
            "types": "Duration",
            "description": "The polling interval between element re-checks.",
            "default": "\"125ms\""
          }
        ],
        "return": {
          "types": "[]Element"
        }
      },
      {
        "name": "stop",
        "description": "Stop loading the currently active tab."
      },
      {
        "name": "type",
        "description": "Input the given textual data as keyboard input into the currently focused\npage element.  The input text contains raw unicode characters that will be typed\nliterally, as well as key names (in accordance with the DOM pre-defined keynames\ndescribed at https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values).\nThese sequences appear between square brackets \"[\" \"]\".\n\nExample: Type in the Konami code\n\n type \"[ArrowUp][ArrowUp][ArrowDown][ArrowDown][ArrowLeft][ArrowRight][ArrowLeft][ArrowRight]BA\"",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "options": [
          {
            "name": "alt",
            "types": "bool"
          },
          {
            "name": "control",
            "types": "bool"
          },
          {
            "name": "shift",
            "types": "bool"
          },
          {
            "name": "meta",
            "types": "bool"
          },
          {
            "name": "is_keypad",
            "types": "bool",
            "description": "Whether the text being input is issued via the numeric keypad or not."
          },
          {
            "name": "key_down_time",
            "types": "Duration",
            "description": "How long that each individual keystroke will remain down for.",
            "default": "\"30ms\""
          },
          {
            "name": "key_down_jitter",
            "types": "Duration",
            "description": "An amount of time to randomly vary the `key_down_time` duration from within each keystroke."
          },
          {
            "name": "delay",
            "types": "Duration",
            "description": "How long to wait between issuing individual keystrokes.",
            "default": "\"30ms\""
          },
          {
            "name": "delay_jitter",
            "types": "Duration",
            "description": "An amount of time to randomly vary the delay duration from between keystrokes."
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "unexport",
        "description": "Specify a variable that should be unexported.",
        "argument": {
          "name": "name",
          "types": "string"
        }
      },
      {
        "name": "wait",
        "description": "Pauses execution of the current script for the given duration.",
        "argument": {
          "name": "delay",
          "types": "any"
        }
      },
      {
        "name": "wait_for",
        "description": "Wait for a specific event or events matching the given glob pattern, up to an\noptional Timeout duration.",
        "argument": {
          "name": "event",
          "types": "string"
        },
        "options": [
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The timeout before we stop waiting for the event.",
            "default": "\"30s\""
          }
        ]
      },
      {
        "name": "wait_for_load",
        "description": "Wait for a page load event.",
        "options": [
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The timeout before we stop waiting for the event.",
            "default": "\"30s\""
          }
        ]
      }
    ]
  },
  {
    "display_name": "file",
    "name": "file",
    "commands": [
      {
        "name": "write",
        "description": "Write a value or a stream of data to a file at the given path.  The destination path can be a local\nfilesystem path, a URI that uses a custom scheme registered outside of the application, or the string\n\"temporary\", which will write to a temporary file whose path will be returned in the response.",
        "argument": {
          "name": "destination",
          "types": "any"
        },
        "options": [
          {
            "name": "data",
            "types": "stream",
            "description": "The data to write to the destination."
          },
          {
            "name": "value",
            "types": "any",
            "description": "The data to write as a discrete value."
          },
          {
            "name": "autoclose",
            "types": "bool",
            "description": "Whether to attempt to close the destination (if possible) after reading/writing.",
            "default": true
          }
        ],
        "return": {
          "types": "WriteResponse",
          "parameters": [
            {
              "name": "path",
              "types": "string",
              "description": "The filesystem path that the data was written to."
            },
            {
              "name": "size",
              "types": "int",
              "description": "The size of the data (in bytes)."
            },
            {
              "name": "took",
              "types": "Duration",
              "description": "The amount of time it took to complete writing the data."
            }
          ]
        }
      }
    ]
  },
  {
    "display_name": "format",
    "name": "fmt",
    "commands": [
      {
        "name": "autotype",
        "description": "Takes an input value and returns that value as the most appropriate data type based on its contents.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "any"
        }
      },
      {
        "name": "camelize",
        "description": "Return the given string converted to camelCase.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "codepoints",
        "description": "Return an array of Unicode codepoints for each character in the given string.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "[]int"
        }
      },
      {
        "name": "format",
        "description": "Format the given string according to the given pattern and values.",
        "argument": {
          "name": "pattern",
          "types": "string"
        },
        "options": [
          {
            "name": "data",
            "types": "any"
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "join",
        "description": "Join an array of inputs into a single string, with each item separated by a given joiner string.",
        "argument": {
          "name": "inputs",
          "types": "any"
        },
        "options": [
          {
            "name": "joiner",
            "types": "string",
            "default": "\",\""
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "lcp",
        "description": "Returns the longest common prefix among an array of input strings.",
        "argument": {
          "name": "inputs",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "lower",
        "description": "Return the given string converted to lowercase.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "pascalize",
        "description": "Return the given string converted to PascalCase.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "replace",
        "description": "Replaces values in an input string (exact matches or regular expressions) with a replacement value.\nExact matches will be replaced up to a certain number of times, or all occurrences of count is -1 (default).",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "options": [
          {
            "name": "find",
            "types": "any"
          },
          {
            "name": "replace",
            "types": "string"
          },
          {
            "name": "count",
            "types": "int",
            "default": -1
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "split",
        "description": "Split a given string by a given delimiter.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "options": [
          {
            "name": "on",
            "types": "string",
            "default": "\",\""
          }
        ],
        "return": {
          "types": "[]string"
        }
      },
      {
        "name": "strip",
        "description": "Strip leading and trailing whitespace from the given string.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "title",
        "description": "Return the given string converted to Title Case.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "trim",
        "description": "Remove a leading and/org trailing string value from the given string.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "options": [
          {
            "name": "prefix",
            "types": "string"
          },
          {
            "name": "suffix",
            "types": "string"
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "underscore",
        "description": "Return the given string converted to underscore_case.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "upper",
        "description": "Return the given string converted to UPPERCASE.",
        "argument": {
          "name": "input",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      }
    ]
  },
  {
    "display_name": "http",
    "name": "http",
    "commands": [
      {
        "name": "defaults",
        "description": "Set default options that apply to all subsequent HTTP requests.",
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ]
      },
      {
        "name": "delete",
        "description": "Perform an HTTP DELETE request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      },
      {
        "name": "get",
        "description": "Perform an HTTP GET request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      },
      {
        "name": "head",
        "description": "Perform an HTTP HEAD request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      },
      {
        "name": "options",
        "description": "Perform an HTTP OPTIONS request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      },
      {
        "name": "post",
        "description": "Perform an HTTP POST request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      },
      {
        "name": "put",
        "description": "Perform an HTTP PUT request.",
        "argument": {
          "name": "url",
          "types": "string"
        },
        "options": [
          {
            "name": "headers",
            "types": "map",
            "description": "The headers to send with the request."
          },
          {
            "name": "params",
            "types": "map",
            "description": "Query string parameters to add to the request."
          },
          {
            "name": "cookies",
            "types": "map",
            "description": "A map of cookie key=value pairs to include in the request."
          },
          {
            "name": "timeout",
            "types": "Duration",
            "description": "The amount of time to wait for the request to complete.",
            "default": "\"30s\""
          },
          {
            "name": "body",
            "types": "any",
            "description": "The body of the request. This is processed according to what is specified in RequestType."
          },
          {
            "name": "request_type",
            "types": "string",
            "description": "The type of data in Body, specifying how it should be encoded.  Valid values are \"raw\", \"form\", and \"json\"",
            "default": "\"json\""
          },
          {
            "name": "response_type",
            "types": "string",
            "description": "Specify how the response body should be decoded.  Can be \"raw\", or a MIME type that overrides the Content-Type response header."
          },
          {
            "name": "disable_verify_ssl",
            "types": "bool",
            "description": "Whether to disable TLS peer verification."
          },
          {
            "name": "certificate_bundle",
            "types": "string",
            "description": "The path to the root TLS CA bundle to use for verifying peer certificates."
          },
          {
            "name": "statuses",
            "types": "string",
            "description": "A comma-separated list of numbers (e.g.: 200) or inclusive number ranges (e.g. 200-399) specifying HTTP statuses that are\nexpected and non-erroneous.",
            "default": "\"200-299\""
          },
          {
            "name": "continue_on_error",
            "types": "bool",
            "description": "Whether to continue execution if an error status is encountered."
          },
          {
            "name": "raw_body",
            "types": "bool",
            "description": "Specify that absolutely no processing should be done on the response body."
          }
        ],
        "return": {
          "types": "HttpResponse",
          "parameters": [
            {
              "name": "status",
              "types": "int",
              "description": "The numeric HTTP status code of the response."
            },
            {
              "name": "status_text",
              "types": "string",
              "description": "A textual description of the HTTP response code."
            },
            {
              "name": "took",
              "types": "int",
              "description": "The time (in millisecond) that the request took to complete."
            },
            {
              "name": "headers",
              "types": "map",
              "description": "Response headers sent back from the server."
            },
            {
              "name": "content_type",
              "types": "string",
              "description": "The MIME type of the response body (if any)."
            },
            {
              "name": "length",
              "types": "int",
              "description": "The length of the response body in bytes."
            },
            {
              "name": "body",
              "types": "any",
              "description": "The decoded response body (if any)."
            },
            {
              "name": "error",
              "types": "bool",
              "description": "If the response status is considered an error, and errors aren't fatal, this will be true."
            }
          ]
        }
      }
    ]
  },
  {
    "display_name": "page",
    "name": "page",
    "summary": "Commands for inspecting and manipulating the current DOM document and browser viewport.",
    "commands": [
      {
        "name": "clear_intercepts",
        "description": "Clear all request intercepts."
      },
      {
        "name": "intercept",
        "description": "Intercept all requests where the requested URL matches *match*, and modify the request\naccording to the provided arguments.",
        "argument": {
          "name": "match",
          "types": "string"
        },
        "options": [
          {
            "name": "body",
            "types": "any",
            "description": "Rewrite the response body with the provided string or with the contents of\nan io.Reader."
          },
          {
            "name": "file",
            "types": "string",
            "description": "Read the response body contents from the named file."
          },
          {
            "name": "wait_for_headers",
            "types": "bool",
            "description": "Specify that the interception should wait for response headers to be sent.  Otherwise the\nrequest is intercepted prior to making the request."
          },
          {
            "name": "reject",
            "types": "bool",
            "description": "Should the request be aborted/rejected."
          },
          {
            "name": "method",
            "types": "string",
            "description": "Rewrite the request method to this."
          },
          {
            "name": "url",
            "types": "string",
            "description": "Rewrite the request URL to this value."
          },
          {
            "name": "headers",
            "types": "map",
            "description": "Set the request headers.  Not valid is WaitForHeaders is set."
          },
          {
            "name": "post_data",
            "types": "map",
            "description": "Update the POST data to these values."
          },
          {
            "name": "statuses",
            "types": "[]int",
            "description": "Only apply to response HTTP status codes in this list."
          },
          {
            "name": "realm",
            "types": "string",
            "description": "Send credentials in response to this realm.  If empty, the provided credentials\nwill be sent to any authentication challenge."
          },
          {
            "name": "username",
            "types": "string",
            "description": "Username to authenticate with."
          },
          {
            "name": "password",
            "types": "string",
            "description": "Password to authenticate with."
          },
          {
            "name": "persistent",
            "types": "bool",
            "description": "Specify whether the intercept should persist after the first match."
          }
        ]
      },
      {
        "name": "pdf",
        "description": "Render the current page as a PDF document, writing it to the given filename or writable\ndestination object.",
        "argument": {
          "name": "destination",
          "types": "any"
        },
        "options": [
          {
            "name": "autoclose",
            "types": "bool",
            "description": "Whether the given destination should be automatically closed for writing after the\nPDF is written.",
            "default": true
          }
        ]
      },
      {
        "name": "remove",
        "description": "Remove all occurrences of the element(s) matching the given selector.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "options": [
          {
            "name": "parent",
            "types": "Selector"
          }
        ],
        "return": {
          "types": "int"
        }
      },
      {
        "name": "screenshot",
        "description": "Render the current page as a PNG or JPEG image, writing it to the given filename or writable\ndestination object.\n\nIf the filename is the string `\"temporary\"`, a file will be created in the system's\ntemporary area (e.g.: `/tmp`) and the screenshot will be written there.  It is the caller's\nresponsibility to remove the temporary file if desired.  The temporary file path is available in\nthe return object's `path` parameter.",
        "argument": {
          "name": "destination",
          "types": "any"
        },
        "options": [
          {
            "name": "selector",
            "types": "Selector",
            "description": "If specified, the screenshot will attempt to capture just the matching element."
          },
          {
            "name": "use",
            "types": "string",
            "description": "Determines how to handle multiple elements that are matched by Selector.\nMay be \"tallest\" or \"first\".",
            "default": "\"tallest\""
          },
          {
            "name": "width",
            "types": "int"
          },
          {
            "name": "height",
            "types": "int"
          },
          {
            "name": "x",
            "types": "int",
            "default": -1
          },
          {
            "name": "y",
            "types": "int",
            "default": -1
          },
          {
            "name": "format",
            "types": "string",
            "description": "The output image format of the screenshot.  May be \"png\" or \"jpeg\".",
            "default": "\"png\""
          },
          {
            "name": "quality",
            "types": "int",
            "description": "The quality of the image used during encoding.  Only applies to \"jpeg\" format."
          },
          {
            "name": "autoclose",
            "types": "bool",
            "description": "Whether the given destination should be automatically closed for writing after the\nscreenshot is written.",
            "default": true
          },
          {
            "name": "autoresize",
            "types": "bool",
            "description": "Automatically resize the screen to the width and height.",
            "default": true
          }
        ],
        "return": {
          "types": "ScreenshotResponse",
          "parameters": [
            {
              "name": "element",
              "types": "Element",
              "description": "Details about the element that matched the given selector (if any)."
            },
            {
              "name": "width",
              "types": "int",
              "description": "The width of the screenshot (in pixels)."
            },
            {
              "name": "height",
              "types": "int",
              "description": "The height of the screenshot (in pixels)."
            },
            {
              "name": "x",
              "types": "int",
              "description": "The X position (relative to the viewport) the screenshot was taken at."
            },
            {
              "name": "y",
              "types": "int",
              "description": "The Y position (relative to the viewport) the screenshot was taken at."
            },
            {
              "name": "path",
              "types": "string",
              "description": "The filesystem path that the screenshot was written to."
            },
            {
              "name": "size",
              "types": "int",
              "description": "The size of the screenshot (in bytes)."
            }
          ]
        }
      },
      {
        "name": "source",
        "description": "Return the source for the given element, or for the whole page.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "text",
        "description": "Return the text content for the given element, or for the whole page.",
        "argument": {
          "name": "selector",
          "types": "Selector"
        },
        "return": {
          "types": "string"
        }
      }
    ]
  },
  {
    "display_name": "parse",
    "name": "parse",
    "commands": [
      {
        "name": "json",
        "description": "Parses the given file as a JSON document and returns the resulting value.",
        "argument": {
          "name": "fileOrReader",
          "types": "any"
        },
        "return": {
          "types": "any"
        }
      },
      {
        "name": "yaml",
        "description": "Parses the given file as a YAML document and returns the resulting value.",
        "argument": {
          "name": "fileOrReader",
          "types": "any"
        },
        "return": {
          "types": "any"
        }
      }
    ]
  },
  {
    "display_name": "url",
    "name": "url",
    "commands": [
      {
        "name": "encode_query",
        "description": "Take a map or previous URL response structure and encode the values into a string\nthat can be used in another URL or form post data.  This command does not automaticlly\nprepend a \"?\" character to the output.",
        "argument": {
          "name": "querymap",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "escape",
        "description": "Escapes the string so it can be safely placed inside a URL path segment, replacing special characters (including /) with %XX sequences as needed.",
        "argument": {
          "name": "stringOrStruct",
          "types": "any"
        },
        "return": {
          "types": "string"
        }
      },
      {
        "name": "parse",
        "description": "Parse the given URL string or structure, and return a structured representation of the various parts of a URL.",
        "argument": {
          "name": "u",
          "types": "any"
        },
        "return": {
          "types": "URL",
          "parameters": [
            {
              "name": "scheme",
              "types": "string"
            },
            {
              "name": "host",
              "types": "string"
            },
            {
              "name": "domain",
              "types": "string"
            },
            {
              "name": "port",
              "types": "int"
            },
            {
              "name": "path",
              "types": "string"
            },
            {
              "name": "raw_query",
              "types": "string"
            },
            {
              "name": "fragment",
              "types": "string"
            },
            {
              "name": "query",
              "types": "map"
            },
            {
              "name": "full",
              "types": "string"
            },
            {
              "name": "url",
              "types": "URL"
            }
          ]
        }
      },
      {
        "name": "parse_query",
        "description": "Take a URL or map of query string key=value pairs and return a map of values.",
        "argument": {
          "name": "urlOrQueryString",
          "types": "any"
        },
        "return": {
          "types": "map"
        }
      }
    ]
  },
  {
    "display_name": "utils",
    "name": "utils",
    "commands": []
  },
  {
    "display_name": "vars",
    "name": "vars",
    "commands": [
      {
        "name": "clear",
        "description": "Unset the value at the given key.",
        "argument": {
          "name": "key",
          "types": "string"
        }
      },
      {
        "name": "ensure",
        "description": "Emit an error if the given key does not exist, optionally with a user-specified message.",
        "argument": {
          "name": "key",
          "types": "string"
        },
        "options": [
          {
            "name": "message",
            "types": "string"
          }
        ]
      },
      {
        "name": "get",
        "description": "Return the value of a specific variable defined in a scope.",
        "argument": {
          "name": "key",
          "types": "string"
        },
        "options": [
          {
            "name": "fallback",
            "types": "any"
          }
        ],
        "return": {
          "types": "any"
        }
      },
      {
        "name": "interpolate",
        "description": "Return a value interpolated with values from a scope or ones that are explicitly provided.",
        "argument": {
          "name": "format",
          "types": "string"
        },
        "options": [
          {
            "name": "values",
            "types": "any"
          }
        ],
        "return": {
          "types": "string"
        }
      },
      {
        "name": "keys",
        "description": "Return a sorted list of all variable names in the current scope.",
        "return": {
          "types": "[]string"
        }
      },
      {
        "name": "pop",
        "description": "Take the last value from the array at key.  If key is an array, the last value of\nthat array will be returned and the remainder will be left at key.  Empty arrays will\nreturn nil and be unset.  Non-array values will be returned and the key will be unset.",
        "argument": {
          "name": "key",
          "types": "string"
        },
        "return": {
          "types": "any"
        }
      },
      {
        "name": "push",
        "description": "Push the given value onto the array at the specified key, creating the array if not\npresent, and converting the existing value into an array already set to non-array value.",
        "argument": {
          "name": "key",
          "types": "string"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          }
        ]
      },
      {
        "name": "set",
        "description": "Set the named variable to the given value, optionally interpolating variables from the current\nscope into the variable.",
        "argument": {
          "name": "key",
          "types": "string"
        },
        "options": [
          {
            "name": "value",
            "types": "any"
          },
          {
            "name": "interpolate",
            "types": "bool",
            "default": true
          }
        ],
        "return": {
          "types": "any"
        }
      }
    ]
  }
]
